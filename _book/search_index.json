[["index.html", "Codelets Chapter 1 About 1.1 Usage", " Codelets Karissa Whiting Updated: 2022-07-10 Chapter 1 About This is an encyclopedia of useful R code snippets (a.k.a. “codelets”), written in Markdown. 1.1 Usage This is meant to be an easily accessible reference guide for all the bits of code I can never remember. Chapters most often will contain several snippets each are organized by usage (e.g. Data Cleaning) or package (e.g. {ggplot}). All code examples should be reprex. "],["ggplot.html", "Chapter 2 {ggplot} 2.1 Break Legend Into Multiple Lines 2.2 Change Title of Legend", " Chapter 2 {ggplot} All chapters start with a first-level heading followed by your chapter title, like the line above. There should be only one first-level heading (#) per .Rmd file. 2.1 Break Legend Into Multiple Lines You can use the guides() function to split your legend into multiple rows (nrow argument) library(survminer) library(survival) packageVersion(&quot;survminer&quot;) ## [1] &#39;0.4.9&#39; packageVersion(&quot;survival&quot;) ## [1] &#39;3.3.1&#39; fit &lt;- survfit(Surv(time, status) ~ ph.ecog, data = lung) ggsurvplot(fit, data = lung) + guides(color = guide_legend(nrow = 2)) 2.2 Change Title of Legend Change the title of any legend (e.g. fill, color, alpha) with labs() library(ggplot2) packageVersion(&quot;ggplot2&quot;) ## [1] &#39;3.3.6&#39; ggplot(iris, aes(Sepal.Length, Sepal.Width, color = Species, alpha = Sepal.Width)) + geom_point() + labs(color = &quot;Flower Species&quot;, alpha = &quot;Width of Sepal&quot;) "],["git-github.html", "Chapter 3 Git &amp; Github 3.1 Add an Upstream Repository 3.2 Configure Your Credentials", " Chapter 3 Git &amp; Github Mostly terminal commands that are helpful for version control 3.1 Add an Upstream Repository git remote add upstream https://github.com/&lt;owner-of-upstream&gt;/&lt;upstream-repo&gt;.git 3.2 Configure Your Credentials git config --global user.email &quot;you@example.com&quot; git config --global user.name &quot;Your Name&quot; "],["data-cleaning.html", "Chapter 4 Data Cleaning 4.1 Excel Numeric Dates Mixed With Character", " Chapter 4 Data Cleaning 4.1 Excel Numeric Dates Mixed With Character Sometimes columns may be read in with both excel numeric dates and character dates by default. This code looks for a forward slash to distinguish which is which and converts accordingly. This may not work for all data formats but catches most cases I come across. library(tidyverse) library(lubridate) data &lt;- tibble::tribble( ~id, ~messy_date, 1L, &quot;43381&quot;, 2L, &quot;43699&quot;, 3L, &quot;43665&quot;, 4L, &quot;43827&quot;, 5L, &quot;43911&quot;, 6L, &quot;5/10/2019&quot;, 7L, &quot;44037&quot;, 8L, &quot;44151&quot;, 9L, &quot;44105&quot; ) data %&gt;% dplyr::mutate(clean_date = case_when( str_detect(messy_date, fixed(&#39;/&#39;)) ~ mdy(messy_date), TRUE ~ janitor::excel_numeric_to_date(as.numeric(messy_date)))) ## # A tibble: 9 × 3 ## id messy_date clean_date ## &lt;int&gt; &lt;chr&gt; &lt;date&gt; ## 1 1 43381 2018-10-08 ## 2 2 43699 2019-08-22 ## 3 3 43665 2019-07-19 ## 4 4 43827 2019-12-28 ## 5 5 43911 2020-03-21 ## 6 6 5/10/2019 2019-05-10 ## 7 7 44037 2020-07-25 ## 8 8 44151 2020-11-16 ## 9 9 44105 2020-10-01 "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
